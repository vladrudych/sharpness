using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace ApiServiceNamespace
{
    public abstract class ApiService
    {
        public ApiConfig Config { get; set; }

        public HttpClient HttpClient { get; set; }
    }

    public class ApiFile
    {
        public string Name { get; }
        public string Path { get; }
        public string Type { get; }
        public Stream Stream { get; }
        public byte[] Content { get; }

        private ApiFile(string name, string type)
        {
            Type = type;
            Name = name;
        }

        public ApiFile(string name, string path, string type = null) : this(name, type)
        {
            Path = path;
        }

        public ApiFile(string name, Stream stream, string type = null) : this(name, type)
        {
            Stream = stream;
        }

        public ApiFile(string name, byte[] content, string type = null) : this(name, type)
        {
            Content = content;
        }
    }

    public abstract class ApiConfig
    {
        public abstract HttpClient HttpClient { get; }

        public abstract string BaseUrl { get; }

        public virtual void InterceptRequest(HttpRequestMessage request) { }

        public virtual void InterceptResponse(HttpResponseMessage response) { }

        public virtual void InterceptData(HttpResponseMessage request, object data) { }
    }

    public enum ApiTaskState
    {
        Draft, Active, Done
    }

    public class ApiTask<TResult> : Task<TResult>
    {
        public static ApiTask<TResult> Create(ApiService service, string method, string url)
        {
            if (service.Config == null)
            {
                throw new Exception("Service configuration unspecified!");
            }

            if (string.IsNullOrEmpty(service.Config.BaseUrl))
            {
                throw new Exception("BaseUrl is not set in service configuration!");
            }

            ApiTask<TResult> task = null;

            task = new ApiTask<TResult>(service, method, url, () => task.ExecuteInternal(), service.HttpClient);

            return task;
        }

        private ApiTask(ApiService service, string method, string url, Func<TResult> func, HttpClient httpClient = null) : base(func)
        {
            Url = url;
            Method = method;
            Service = service;
            State = ApiTaskState.Draft;
            HttpClient = httpClient;
        }

        public ApiTaskState State { get; private set; }

        public ApiService Service { get; }

        public string Url { get; }
        public string Method { get; }

        public string[] ContentType { get; private set; }
        public string[] Accept { get; private set; }

        public HttpClient HttpClient { get; set; }

        public object Body { get; private set; }

        public HttpRequestMessage RequestMessage { get; set; }
        public JsonSerializer Serializer { get; private set; }

        public Dictionary<string, string> QueryParams { get; private set; }
        public Dictionary<string, string> HeaderParams { get; private set; }
        public Dictionary<string, string> FormParams { get; private set; }
        public Dictionary<string, ApiFile> FileParams { get; private set; }


        public event EventHandler<ApiTaskEventArgs> Events;


        private HttpMethod GetMethod(string method)
        {
            switch (method)
            {
                case "PUT": return HttpMethod.Put;
                case "POST": return HttpMethod.Post;
                case "GET": return HttpMethod.Get;
                case "DELETE": return HttpMethod.Delete;
                case "OPTIONS": return HttpMethod.Options;
                case "TRACE": return HttpMethod.Trace;
            }

            return null;
        }

        private void ConfigureRequest()
        {
            string url = Url;

            if (QueryParams != null && QueryParams.Count > 0)
            {
                var queryParams = string.Join("&", QueryParams.Select(p => $"{p.Key}={p.Value}"));

                if (url.Contains("?"))
                {
                    url = $"{url}&{queryParams}";
                }
                else
                {
                    url = $"{url}?{queryParams}";
                }
            }

            if (HttpClient == null)
            {
                HttpClient = new HttpClient();
            }

            RequestMessage = new HttpRequestMessage(
                GetMethod(Method),
                Service.Config.BaseUrl + url
            );

            Serializer = new JsonSerializer();

            if (HeaderParams != null)
            {
                foreach (var header in HeaderParams)
                {
                    RequestMessage.Headers.Add(header.Key, header.Value);
                }
            }

            RequestMessage.Headers.Accept
                .Add(new MediaTypeWithQualityHeaderValue(FindContentType(Accept)));
        }

        private void ConfigureContentHeaders()
        {
            if (RequestMessage.Content != null && !(RequestMessage.Content is MultipartFormDataContent))
            {
                RequestMessage.Content.Headers.ContentType = new MediaTypeHeaderValue(FindContentType(ContentType));
            }
        }

        private string FindContentType(string[] contentTypes)
        {
            if (contentTypes == null || contentTypes.Length == 0 || contentTypes.Contains("application/json"))
            {
                return "application/json";
            }
            return contentTypes.FirstOrDefault();
        }

        private bool MethodHasBody()
        {
            return Method == "PUT" || Method == "POST" || Method == "DELETE";
        }


        private MultipartFormDataContent GetMultipart()
        {
            string boundary = "---------------------------" + DateTime.Now.Ticks.ToString("x");

            var content = new MultipartFormDataContent(boundary);

            if (FormParams != null)
            {
                foreach (var p in FormParams)
                {
                    content.Add(new StringContent(p.Value), p.Key);
                }
            }

            foreach (var file in FileParams)
            {
                HttpContent fileContent;

                if (file.Value.Stream != null)
                {
                    fileContent = new StreamContent(file.Value.Stream);
                }
                else if (file.Value.Content != null)
                {
                    fileContent = new ByteArrayContent(file.Value.Content);
                }
                else
                {
                    throw new ArgumentException("Content for ApiFile unspecified!");
                }

                fileContent.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data")
                {
                    Name = file.Key,
                    FileName = file.Value.Name
                };
                fileContent.Headers.Remove("Content-Type");
                fileContent.Headers.Add("Content-Type", "application/octet-stream");

                fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");
                content.Add(fileContent, file.Key, file.Value.Name);
            }

            return content;
        }



        private async Task<TResult> ReadResponse(HttpResponseMessage responseMessage)
        {
            using var stream = await responseMessage.Content.ReadAsStreamAsync();
            using var reader = new StreamReader(stream);
            using var json = new JsonTextReader(reader);
            return Serializer.Deserialize<TResult>(json);
        }

        private TResult ExecuteInternal()
        {

            ConfigureRequest();

            Service.Config?.InterceptRequest(RequestMessage);

            if (MethodHasBody())
            {
                if (Body != null)
                {
                    RequestMessage.Content = new StringContent(JsonConvert.SerializeObject(Body));
                }
                else
                {
                    if (FileParams != null)
                    {
                        RequestMessage.Content = GetMultipart();
                    }
                    else if (FormParams != null)
                    {
                        RequestMessage.Content = new FormUrlEncodedContent(FormParams);
                    }
                }

                if (RequestMessage.Content == null)
                {
                    RequestMessage.Content = new StringContent(string.Empty);
                }
            }

            ConfigureContentHeaders();

            var responseTask = HttpClient.SendAsync(RequestMessage);

            if (Events == null || !MethodHasBody())
            {
                responseTask.Wait();
            }
            else
            {
                // TODO: Raise REAL events
                int currentProgress = 0;
                int maxProress = 2000;
                while (!responseTask.Wait(20))
                {
                    currentProgress += 20;
                    if (currentProgress > maxProress)
                    {
                        currentProgress = maxProress;
                    }
                    Events.Invoke(this, new ApiTaskEventArgs(currentProgress, maxProress));
                }
            }

            if (responseTask.Exception != null)
            {
                throw responseTask.Exception;
            }

            using var responseMessage = responseTask.Result;

            responseMessage.EnsureSuccessStatusCode();

            Service.Config.InterceptResponse(responseMessage);

            var readTask = ReadResponse(responseMessage);
            readTask.Wait();

            if (readTask.Exception != null)
            {
                throw readTask.Exception;
            }

            var data = readTask.Result;

            Service.Config.InterceptData(responseMessage, data);

            return data;
        }

        private void CheckDraftState()
        {
            if (State != ApiTaskState.Draft)
            {
                throw new Exception($"Unable to modify ApiTask in {State} state!");
            }
        }

        public ApiTask<TResult> AddQueryParam(string key, object value)
        {
            CheckDraftState();

            (QueryParams ?? (QueryParams = new Dictionary<string, string>()))
                .Add(key, value?.ToString());

            return this;
        }

        public ApiTask<TResult> AddFormParam(string key, object value)
        {
            CheckDraftState();

            if (value is ApiFile file)
            {
                (FileParams ?? (FileParams = new Dictionary<string, ApiFile>()))
                    .Add(key, file);
            }
            else
            {
                (FormParams ?? (FormParams = new Dictionary<string, string>()))
                    .Add(key, value?.ToString());
            }

            return this;
        }

        public ApiTask<TResult> AddHeaderParam(string key, string value)
        {
            (HeaderParams ?? (HeaderParams = new Dictionary<string, string>()))
                .Add(key, value);
            return this;
        }

        public ApiTask<TResult> AddBodyParam(object value)
        {
            Body = value;
            return this;
        }

        public ApiTask<TResult> AddContentType(params string[] contentType)
        {
            CheckDraftState();
            ContentType = contentType;
            return this;
        }

        public ApiTask<TResult> AddAccept(params string[] accept)
        {
            CheckDraftState();
            ContentType = accept;
            return this;
        }

        public ApiTask<TResult> WithEventHandler(EventHandler<ApiTaskEventArgs> handler)
        {
            Events += handler;
            return this;
        }

        public ApiTask<TResult> Execute()
        {
            Start();
            return this;
        }
    }

    public class ApiTaskEventArgs : EventArgs
    {
        public long BytesSent { get; }
        public long BytesTotal { get; }

        public double Fraction => (double)BytesSent / BytesTotal;
        public double Percentage => Fraction * 100.0;

        public ApiTaskEventArgs(long bytesSent, long bytesTotal)
        {
            BytesSent = bytesSent;
            BytesTotal = bytesTotal;
        }
    }

}
