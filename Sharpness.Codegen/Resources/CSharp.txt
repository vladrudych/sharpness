using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace ApiServiceNamespace
{
    public abstract class ApiService
    {
        public ApiConfig Config { get; set; }
    }

    public class ApiFile
    {
        public string Name { get; }
        public string Path { get; }
        public string Type { get; }
        public Stream Stream { get; }
        public byte[] Content { get; }

        private ApiFile(string name, string type)
        {
            Type = type;
            Name = name;
        }

        public ApiFile(string name, string path, string type = null) : this(name, type)
        {
            Path = path;
        }

        public ApiFile(string name, Stream stream, string type = null) : this(name, type)
        {
            Stream = stream;
        }

        public ApiFile(string name, byte[] content, string type = null) : this(name, type)
        {
            Content = content;
        }
    }

    public abstract class ApiConfig
    {
        public abstract string BaseUrl { get; }

        public virtual void InterceptRequest(HttpWebRequest request) { }

        public virtual void InterceptResponse(HttpWebResponse response) { }

        public virtual void InterceptData(HttpWebRequest request, object data) { }
    }

    public enum ApiTaskState
    {
        Draft, Active, Done
    }

    public class ApiTask<TResult> : Task<TResult>
    {
        public static ApiTask<TResult> Create(ApiService service, string method, string url)
        {
            if (service.Config == null)
            {
                throw new Exception("Service configuration unspecified!");
            }

            if (string.IsNullOrEmpty(service.Config.BaseUrl))
            {
                throw new Exception("BaseUrl is not set in service configuration!");
            }

            ApiTask<TResult> task = null;

            task = new ApiTask<TResult>(service, method, url, task.ExecuteInternal);

            return task;
        }

        private ApiTask(ApiService service, string method, string url, Func<TResult> func) : base(func)
        {
            Url = url;
            Method = method;
            Service = service;
            State = ApiTaskState.Draft;
        }

        public ApiTaskState State { get; private set; }

        public ApiService Service { get; }

        public string Url { get; }
        public string Method { get; }

        public string[] ContentType { get; private set; }
        public string[] Accept { get; private set; }

        public object Body { get; private set; }
        public HttpWebRequest Request { get; private set; }
        public JsonSerializer Serializer { get; private set; }

        public Dictionary<string, string> QueryParams { get; private set; }
        public Dictionary<string, string> HeaderParams { get; private set; }
        public Dictionary<string, string> FormParams { get; private set; }
        public Dictionary<string, ApiFile> FileParams { get; private set; }


        public event EventHandler<ApiTaskEventArgs> Events;


        private void ConfigureRequest()
        {
            string url = Url;

            if (QueryParams != null && QueryParams.Count > 0)
            {
                var queryParams = string.Join("&", QueryParams.Select(p => $"{p.Key}={p.Value}"));

                if (url.Contains("?"))
                {
                    url = $"{url}&{queryParams}";
                }
                else
                {
                    url = $"{url}?{queryParams}";
                }
            }

            Request = WebRequest.CreateHttp(Service.Config.BaseUrl + url);
            Serializer = new JsonSerializer();
            Request.Method = Method;

            if (HeaderParams != null)
            {
                foreach (var header in HeaderParams)
                {
                    Request.Headers.Add(header.Key, header.Value);
                }
            }

            Request.ContentType = FindContentType(ContentType);
            Request.Accept = FindContentType(Accept);
            Request.CookieContainer = new CookieContainer();
        }

        private string FindContentType(string[] contentTypes)
        {
            if (contentTypes == null || contentTypes.Length == 0 || contentTypes.Contains("application/json"))
            {
                return "application/json";
            }
            return contentTypes.FirstOrDefault();
        }

        private bool MethodHasBody()
        {
            return Method == "PUT" || Method == "POST" || Method == "DELETE";
        }

        private void WriteBody()
        {
            using (var stream = Request.GetRequestStream())
            using (var writer = new StreamWriter(stream))
            using (var json = new JsonTextWriter(writer))
            {
                Serializer.Serialize(json, Body);
            }
        }

        private void WriteForm()
        {
            using (var stream = Request.GetRequestStream())
            {
                string body = string.Join("&", FormParams
                    .Select(p => $"{p.Key}={WebUtility.UrlEncode(p.Value)}")
                );
                byte[] bytes = Encoding.UTF8.GetBytes(body);
                stream.Write(bytes, 0, bytes.Length);
            }
        }

        private void WriteMultipart()
        {
            string boundary = "---------------------------" + DateTime.Now.Ticks.ToString("x");
            byte[] boundarybytes = Encoding.ASCII.GetBytes("\r\n--" + boundary + "\r\n");

            Request.ContentType = "multipart/form-data; boundary=" + boundary;
            Request.KeepAlive = true;

            var ms = new MemoryStream();

            string formdataTemplate = "Content-Disposition: form-data; name=\"{0}\"\r\n\r\n{1}";

            if (FormParams != null)
            {
                foreach (var p in FormParams)
                {
                    ms.Write(boundarybytes, 0, boundarybytes.Length);
                    string formitem = string.Format(formdataTemplate, p.Key, p.Value);
                    byte[] formitembytes = Encoding.UTF8.GetBytes(formitem);
                    ms.Write(formitembytes, 0, formitembytes.Length);
                }
            }

            foreach (var file in FileParams)
            {
                ms.Write(boundarybytes, 0, boundarybytes.Length);

                string headerTemplate = "Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n";
                string header = string.Format(headerTemplate, file.Key, file.Value.Name, file.Value.Type);
                byte[] headerbytes = Encoding.UTF8.GetBytes(header);
                ms.Write(headerbytes, 0, headerbytes.Length);

                if (file.Value.Stream != null)
                {
                    using (file.Value.Stream)
                    {
                        file.Value.Stream.CopyTo(ms);
                    }
                }
                else if (file.Value.Content != null)
                {
                    ms.Write(file.Value.Content, 0, file.Value.Content.Length);
                }
                else
                {
                    throw new ArgumentException("Content for ApiFile unspecified!");
                }
            }

            byte[] trailer = Encoding.ASCII.GetBytes("\r\n--" + boundary + "--\r\n");
            ms.Write(trailer, 0, trailer.Length);

            Stream rs = Request.GetRequestStream();

            byte[] buffer = new byte[1024 * 8];

            int read;
            int written = 0;

            ms.Seek(0, SeekOrigin.Begin);

            while ((read = ms.Read(buffer, 0, buffer.Length)) > 0)
            {
                rs.Write(buffer, 0, read);
                written += read;

                Events?.Invoke(this, new ApiTaskEventArgs(written, ms.Length));
            }

            rs.Close();
        }

        private TResult ReadResponse()
        {
            using (var response = Request.GetResponse())
            {
                Service.Config?.InterceptResponse(response as HttpWebResponse);

                using (var stream = response.GetResponseStream())
                using (var reader = new StreamReader(stream))
                using (var json = new JsonTextReader(reader))
                {
                    return Serializer.Deserialize<TResult>(json);
                }
            }
        }

        private TResult ExecuteInternal()
        {
            ConfigureRequest();

            Service.Config?.InterceptRequest(Request);

            if (MethodHasBody())
            {
                if (Body != null)
                {
                    WriteBody();
                }
                else
                {
                    if (FileParams != null)
                    {
                        WriteMultipart();
                    }
                    else if (FormParams != null)
                    {
                        WriteForm();
                    }
                    else
                    {
                        Request.ContentLength = 0;
                    }
                }
            }

            var data = ReadResponse();

            Service.Config?.InterceptData(Request, data);

            return data;
        }

        private void CheckDraftState()
        {
            if (State != ApiTaskState.Draft)
            {
                throw new Exception($"Unable to modify ApiTask in {State} state!");
            }
        }

        public ApiTask<TResult> AddQueryParam(string key, object value)
        {
            CheckDraftState();

            (QueryParams ?? (QueryParams = new Dictionary<string, string>()))
                .Add(key, value?.ToString());

            return this;
        }

        public ApiTask<TResult> AddFormParam(string key, object value)
        {
            CheckDraftState();

            if (value is ApiFile file)
            {
                (FileParams ?? (FileParams = new Dictionary<string, ApiFile>()))
                    .Add(key, file);
            }
            else
            {
                (FormParams ?? (FormParams = new Dictionary<string, string>()))
                    .Add(key, value?.ToString());
            }

            return this;
        }

        public ApiTask<TResult> AddHeaderParam(string key, string value)
        {
            (HeaderParams ?? (HeaderParams = new Dictionary<string, string>()))
                .Add(key, value);
            return this;
        }

        public ApiTask<TResult> AddBodyParam(object value)
        {
            Body = value;
            return this;
        }

        public ApiTask<TResult> AddContentType(params string[] contentType)
        {
            CheckDraftState();
            ContentType = contentType;
            return this;
        }

        public ApiTask<TResult> AddAccept(params string[] accept)
        {
            CheckDraftState();
            ContentType = accept;
            return this;
        }

        public ApiTask<TResult> WithEventHandler(EventHandler<ApiTaskEventArgs> handler)
        {
            Events += handler;
            return this;
        }

        public ApiTask<TResult> Execute()
        {
            Start();
            return this;
        }
    }

    public class ApiTaskEventArgs : EventArgs
    {
        public long BytesSent { get; }
        public long BytesTotal { get; }

        public double Fraction => (double)BytesSent / BytesTotal;
        public double Percentage => Fraction * 100.0;

        public ApiTaskEventArgs(long bytesSent, long bytesTotal)
        {
            BytesSent = bytesSent;
            BytesTotal = bytesTotal;
        }
    }

}
